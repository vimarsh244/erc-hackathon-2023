import rospy
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import Point, Twist
from math import atan2, sqrt

import numpy as np


x = -5.06+1.79
y = -3.12+0.66
theta = 0.0


# List of points to visit
points = [
    [(-5.06, -3.12),(-5.030810611572746, -2.964564276874691), (-5.006301016800769, -2.772969051635586), (-5.01335232539674, -2.5869961083894406), (-5.0450424106615355, -2.4742728427314002), (-5.036214963592425, -2.383971146520099), (-5.048374125472307, -2.034011051710709), (-5.00086422271461, -1.6450587512478214), (-4.953175960331631, -1.436101148115933), (-4.077540661420645, -1.5098627014586885), (-3.964773531420417, -1.2972558822352236), (-3.8118017351888445, -1.3840735612624258), (-3.730303603001504, -1.3985485675835183), (-3.7094535144307286, -1.443201587020344), (-3.66014838330777, -1.4819410170281346), (-3.659422999851919, -1.4884405543523012), (-3.645538366097871, -1.5208430744444097), (-3.649380984679647, -1.5338828589666225), (-3.648125332166168, -1.5780470550398351), (-3.647528984405044, -1.5781526943731792), (-3.648074238280723, -1.5985197576104515), (-3.641469765787517, -1.6613114327598377), (-3.6493182973227603, -1.7084494314381997), (-3.6492284831870823, -1.7331566628068178), (-3.6623673716900242, -1.7343471675100866), (-3.6670099619860563, -1.7740512044370738), (-3.637716655143843, -1.815783523506243), (-3.642944706144448, -1.8634714350453014), (-3.6505573239646565, -1.8982610434254046), (-3.6465919033648135, -1.9169042789395478), (-3.653529349540879, -1.95484288696686), (-3.660604510363207, -1.9591801976824197), (-3.6763174822439173, -1.9608366327179696), (-3.684633560624374, -1.9644091171813383), (-3.6955341450816475, -1.9935269194503724), (-3.7024072189383572, -2.017530873690399), (-3.6954383385730445, -2.036931356671339), (-3.61, -2.2)],
          [(-3.61, -2.2), (-3.739408046625473, -1.6827086224626047), (-3.8890816617010344, -1.4129363737165528), (-3.926915553468486, -1.332130358717918), (-4.021589156665527, -1.3646247039588404), (-4.076527587795199, -1.330312779376916), (-4.205658460451751, -1.318728003070993), (-4.260857853356126, -1.3131959585726116), (-4.348198098313259, -1.3375610202842538), (-4.442656924984769, -1.3701698596393375), (-4.502181869378936, -1.3321877120916439), (-4.550916617484979, -1.329063900671144), (-4.631017804544634, -1.305438960536488), (-4.643157472006579, -1.323979261828185), (-4.675583919600465, -1.3473136381717252), (-4.719197234868113, -1.4128620382487767), (-4.773248174293078, -1.4156957968487345), (-4.829621290406107, -1.3588216807425162), (-4.884244512758547, -1.1926675681991692), (-4.900797023667934, -0.9465863422245403), (-4.943406600334173, -0.7082530324173153), (-4.758526422464586, -0.44889470161254075), (-4.637602618481922, -0.20673782101700305), (-4.676137113796832, -0.1522956215954375), (-4.745446298483858, 0.07906336498447045), (-4.7046390000132625, 0.2822708503933409), (-4.638939188887009, 0.5309202773783586), (-4.377817404640279, 0.543859608214403), (-4.292699728723115, 0.6713245379176408), (-3.879396017949983, 0.7538593682974734), (-3.142152975428715, 0.8070645525957367), (-3.087740503142303, 0.835562918272553), (-3.0503476753422882, 0.9076695932756675), (-3.0745887942932146, 1.027420209183763), (-3.1242805492552055, 1.0966555469792563), (-3.064406705627061, 1.266441673580074), (-3.1074639504463293, 1.4171395147175456), (-3.0742542340758705, 1.4210789338612886), (-3.0271744118195, 1.5675462405912708), (-2.5493992253376443, 1.6943500428516978), (-2.527578020000747, 1.7979667249872107), (-2.500508116740664, 1.8100536674500116), (-2.492830935526058, 1.8820909349106287), (-2.4676566976973087, 1.8804881211231141), (-2.28, 1.86)],
          ]


goals = [(-3.61, -2.2), (-2.28, 1.86), (0.57, 0.33), (1.58, -2.26), (5.18, -2.19)]

goals = [(round(x+1.79, 2), round(y+0.66, 2)) for x, y in goals]



# for w in points:
#     points[w] = [(round(x+1.79, 2), round(y+0.66, 2)) for x, y in points[w]]


points = [[(round(x+1.79, 2), round(y+0.66, 2)) for x, y in sublist] for sublist in points]


print(points)

def newOdom(msg):
    global x
    global y
    global theta

    x = msg.pose.pose.position.x
    y = msg.pose.pose.position.y

    rot_q = msg.pose.pose.orientation
    # theta = msg.pose.pose.orientation.w
    (roll, pitch, theta) = euler_from_quaternion([rot_q.x, rot_q.y, rot_q.z, rot_q.w])

rospy.init_node("speed_controller")

sub = rospy.Subscriber("/odom", Odometry, newOdom)
pub = rospy.Publisher("/cmd_vel", Twist, queue_size = 1)

speed = Twist()

r = rospy.Rate(100)

goal = Point()
# goal.x = -5.0308+1.79
# goal.y = -2.96+0.66

i = 0 #points in the tragectory
j = 0 # paths

goal.x = points[j][i][0]
goal.y = points[j][i][1]
print(goal)

def dist_raw(a,b):
    euclid_dist = sqrt(a**2 + b**2)
    return euclid_dist

while not rospy.is_shutdown():
    inc_x = goal.x -x
    inc_y = goal.y -y

    angle_to_goal = atan2(inc_y, inc_x)
    
    if(dist_raw(inc_x, inc_y)<0.05 and (angle_to_goal-theta) < 0.1):
        i= i+1
        goal.x = points[j][i][0]
        goal.y = points[j][i][1]
        # print(goal)

    calculate_d_goal = dist_raw((goals[j][0]- x),goals[j][1]- y)
    print(calculate_d_goal)
    if( calculate_d_goal < 0.4):
        i = len(points[j])
        print("reached")
        speed.linear.x = 0
        speed.angular.z = 0
        j = j + 1
        i = 0
    else:
        if (angle_to_goal - theta) > 0.1:
            speed.linear.x = 0.0
            speed.angular.z = 1
        elif (angle_to_goal - theta) < -0.1:
            speed.linear.x = 0.0
            speed.angular.z = -1
        else:
            speed.linear.x = 0.2
            speed.angular.z = 0.0
    
        

    pub.publish(speed)
    r.sleep()

